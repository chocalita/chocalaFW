<?= CodeGenerator::TAG_OPEN;?>

/**
 * Generated by Chocala Framework.
 * 
 */
class #CLASS_NAME#Controller extends WebController
{

    public function index()
    {
        $this->redirectTo(array('action' => 'dataList'));
    }

    public function dataList()
    {
        $_page = $_GET['page']?: 1;
        $_max = $_GET['max']?: 10;
        #CLASS_PAGER# = #CLASS_NAME#Query::create()->paginate($_page, $_max);
        $this->setVar('#CLASS_PAGER_TO_VIEW#', #CLASS_PAGER#);
    }

    public function show()
    {
        #CLASS_INSTANCE# = $this->getObjectIfExist();
        $this->setVar('#CLASS_INSTANCE_TO_VIEW#', #CLASS_INSTANCE#);
    }

    public function create()
    {
    <?php
    foreach($mapedColumns as $columnMap){
        $camelName = SpecialStrings::camelCase($columnMap->getColumnName());
        $pascalName = SpecialStrings::pascalCase($columnMap->getColumnName());
        if($columnMap->isForeignKey()){
            $relatedClassName = SpecialStrings::camelCase($columnMap->getRelatedTableName());
            $relatedFieldName = SpecialStrings::camelCase($hashColumns[$columnMap->getName()]['field']);
            $pascalRelatedClassName = SpecialStrings::pascalCase($relatedClassName);
            $relatedColumnName = SpecialStrings::camelCase($columnMap->getRelatedColumnName());
?>
    $<?= $pascalRelatedClassName;?>List = <?= $relatedClassName;?>Query::create()
                ->orderBy<?= $relatedFieldName;?>()->find();
        $this->setVar('<?= $pascalRelatedClassName;?>List', $<?= $pascalRelatedClassName;?>List);
<?php
        }
    }
    ?>

    }

    public function save()
    {
        #CLASS_INSTANCE# = new #CLASS_NAME#();
        #CLASS_INSTANCE#->fromArray($_POST, BasePeer::TYPE_STUDLYPHPNAME);
        if (#CLASS_INSTANCE#->validate()) {
            #CLASS_INSTANCE#->save();
            $this->redirectTo(array('action' => 'show',
                'id' => #CLASS_INSTANCE#->getPrimaryKey()));
        } else {
            $this->setVar('#CLASS_INSTANCE_TO_VIEW#', #CLASS_INSTANCE#);
            $this->setVar('errors', #CLASS_INSTANCE#->getErrorsMap());
            $this->renderView('create');
        }
    }

    public function edit()
    {
        #CLASS_INSTANCE# = $this->getObjectIfExist();
    <?php
    foreach($mapedColumns as $columnMap){
        $camelName = SpecialStrings::camelCase($columnMap->getColumnName());
        $pascalName = SpecialStrings::pascalCase($columnMap->getColumnName());
        if($columnMap->isForeignKey()){
            $relatedClassName = SpecialStrings::camelCase($columnMap->getRelatedTableName());
            $relatedFieldName = SpecialStrings::camelCase($hashColumns[$columnMap->getName()]['field']);
            $pascalRelatedClassName = SpecialStrings::pascalCase($relatedClassName);
            $relatedColumnName = SpecialStrings::camelCase($columnMap->getRelatedColumnName());
?>
    $<?= $pascalRelatedClassName;?>List = <?= $relatedClassName;?>Query::create()
                ->orderBy<?= $relatedFieldName;?>()->find();
        $this->setVar('<?= $pascalRelatedClassName;?>List', $<?= $pascalRelatedClassName;?>List);
<?php
        }
    }
    ?>
        $this->setVar('#CLASS_INSTANCE_TO_VIEW#', #CLASS_INSTANCE#);
    }

    public function update()
    {
        #CLASS_INSTANCE# = $this->getObjectIfExist();
        #CLASS_INSTANCE#->fromArray($_POST, BasePeer::TYPE_STUDLYPHPNAME);
        if (#CLASS_INSTANCE#->validate()) {
            #CLASS_INSTANCE#->save();
            $this->redirectTo(array('action' => 'show',
                'id' => #CLASS_INSTANCE#->getPrimaryKey()));
        } else {
            $this->setVar('#CLASS_INSTANCE_TO_VIEW#', #CLASS_INSTANCE#);
            $this->setVar('errors', #CLASS_INSTANCE#->getErrorsMap());
            $this->renderView('edit');
        }
    }

    public function delete()
    {
        #CLASS_INSTANCE# = $this->getObject();
        try {
            #CLASS_INSTANCE#->delete();
            $this->redirectTo(array('action' => 'dataList'));
        } catch (Exception $e) {
            $this->redirectTo(array('action' => 'show',
                'id' => #CLASS_INSTANCE#->getPrimaryKey()));
        }
    }

    public function getObjectIfExist()
    {
        $object = #CLASS_NAME#Peer::retrieveByPk($this->id);
        if (!is_object($object)) {
            $this->redirectTo(array('action' => 'dataList'));
        }
        return $object;
    }

}